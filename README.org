#+TITLE: censored servant installation script
#+PROPERTIES: :tangle censored-servant.sh
* Introduction

The files in this repo (literately programmed in this org file) are intended to lock Ubuntu to force pury.fi censorship in firefox, automatically delete image and video files you try to download, and make it hard to reverse the changes on a whim. It requires an Ubuntu with a modern ~bash~, >= 4.3.

It assumes that you have one (login) user on your system, but it should be pretty obvious how to modify it for a more general case.

This document is a guide to:

1. Lock down firefox using ~profile.json~
2. Install an extension that blocks videos (necessary for potato-computer users like me).
3. Install an extension that forces youtube into safe mode (since pury.fi is incompatible with youtube at this point).
4. Prevent firefox from downloading outside of the user's ~/home/user/Downloads~ directory by modifying the snap's apparmor settings. 
5. Install a ~.path~ service that watches downloads and deletes (perhaps someday censors) any images that are downloaded.
6. Remove the user's ability to download files directly using ~wget~ and ~curl~.
7. Add a password to the ~grub~ loader to prevent single user login.
8. Add a new superuser and remove ~sudo~ powers from the user's account.
9. Put the superuser passwords under a time lock or give them to your other.
10. ...
11. Masturbate?
 
(Ok, so the guide assumes you already know how to do step 11.)

** *USE AT YOUR OWN RISK*

The obvious cautions about backups apply here, but let me be even more clear just how beta this script is:

/The/ ~censored-servant.sh~ /script should *never* be run./ It is completely untested. I am not a programmer. Actually, the script probably doesn't even run! It is so untested that I haven't even checked it for syntax errors. It modifies ~/boot/grub.cfg~ and can break your bootloader.

*Be a beta, not a beta-tester. Don't run this script on bare metal because it is pretty much guaranteed to eff-up your machine in a way that will, at best, require booting from a live-usb to fix.*

If you are a linux power user, skip [[Script Setup]] and jump right to [[How to make pury.fi censorship permanent]] on your machine. Feel free to spin up a VM and debug this script.

If you're not a linux power user, try not to be a complete moron, and follow the steps [[How to make pury.fi censorship permanent][below]] instead of running the script. [[https://askubuntu.com/][Google]] what you don't understand and proceed with caution. Don't blame me when you brick your machine.

** Next steps

To make it real, you need to make it more difficult to access nudity in other places.

My only other computer at this point (well, I have a work computer I can use to rescue this one) is an iPhone, so I locked that down by treating my phone as a kids phone with parental control enabled using screen-time. I created a new appleid that I locked away the password for.

* Script Setup

By default, the script will display debugging info and does not make changes to files.

#+begin_src shell :comments no
  #!/bin/bash
  debug=true
  dry_run=true
  cmd=echo
  cmd_pip=tr '\n' ' ' | cat && echo
#+end_src

** check flags

#+begin_src shell
    while getopts 'n' opt; do
      case "$opt" in
          h)
           usage
           ;;

          d)
           ;&
        

#+end_src

*** display usage & welcome if no commands sent

#+begin_src shell
  usage() {
      welcome
      echo "Command line options:"
      echo "  -d               display debug messages"
      echo "  -u <username>    use <username> instead of the current user"
      echo "  -p               make it permanent and alter files"
      exit 1;
  }
#+end_src

*** if dry run, don't run commands
#+begin_src shell
  if $dry_run; then
    cmd=echo
    cmd_pipe=tr '\n' ' ' | cat && echo
  else
    cmd=''
    cmd_pip=''
  fi
#+end_src

**** prove dry run is working

#+begin_src shell
  if [$debug]; then
    echo "Test of dry_run - if dry_run flag not set, should produce output of 'ls' command." 
    $cmd ls -l
#+end_src

*** welcome message

#+begin_src shell
  echo This script is designed to lock down your Ubuntu 22 system down to prevent the current user from modifying your browser settings and uninstalling or disabling the pury.fi extension for firefox.
#+end_src

** get environment variables

#+begin_src shell
  if [ -z "$pervert" ]; then # pervert is unset or is the empty string
    if [ $SUDO_USER ]; then
        pervert=$SUDO_USER
    else
        pervert=$(whoami)
    fi
    echo "Censoring user $pervert"
  fi
#+end_src

** authenticate user with sudo powers

*** check user is not root

#+begin_src shell
  if [$pervert==root]
     echo "The script must be run by the user (a sudoer) whose privileges are being removed, and not as root." >&2
     exit 1
  fi
  #+end_src

*** test for sudo

#+begin_src shell
 if ! [ $(id -u) = 0 ]; then
   echo "The script need to be run with superuser privileges." >&2
   exit 1
fi
#+end_src

** ask for new password for root and a sudoer account
#+begin_src shell
  echo "Over Builder recommends setting up an account at ptimelock.com to store your passwords. We will need to store two passwords - your root and sudoer account passwords. We will also test that each password was entered correctly a few times before locking things down. Please copy and paste the response below."
  echo ""
  wait 10
  echo "This is probably a good time to mention that you should disable remote login into your sudoer account if you're going to be storing the password on some random website."
  echo ""
  wait 10
  echo "What will you use as a root password"
  read -s root_password
  echo "Please confirm the root password"
  read -s root_check
  if [$root_password == $root_check]; then
     echo "Take a boomer screenshot (a cell phone picture) of the password you copy pasted from ptimelock.com, or whatever other website you're using, in case you screw up saving it properlybecause you're a giant idiot. (Also, that website can be a bit fiddly with the usernames you enter and fails to save somewhat quietly.)"
     wait 60
     echo "Now enter the password by hand from the screenshot."
     read -s root_check
     if [$root_password == $root_check]; then
         echo "Good, now we can move on to the sudoer password that you will use to rescue your system if you break it, and to disable the policies that will restrict editing firefox. If ${pervert} is not the only sudoer on this system, you will want to deal with the passwords for those other logins somehow, but that can wait."
         echo ""
         wait 10
     else
        echo "Uh-oh, you didn't get the passwords right. It's probably best to start over when you're not drunk."
        exit 1
     fi
  else
      echo "Uh-oh, you didn't get the passwords right. it's probably best to start over when you're not high."
      exit 1
  fi
  echo ""
  echo "What will you use as a sudoer password?"
  read -s puryfier_password
  echo "Please confirm the sudoer password."
  read -s puryfier_check
  if [$puryfier_password == $puryfier_check]; then
     echo "Take a boomer screenshot (a cell phone picture) of the password you copy pasted from ptimelock.com, here and on ptimelock (or whatever other website you're using) in case you screw up saving it properly because you're a giant idiot. (Also, that website can be a bit fiddly with the usernames you enter and fails to save somewhat quietly.)"
     wait 60
     echo "Now enter the password by hand from the screenshot."
     read -s root_check
     if [$puryfier_password == $puryfier_check]; then
         echo "Excellent. We'll set up the sudoer with the username \"puryfier\"."
         echo ""
         wait 10
     else
        echo "Uh-oh, you didn't get the passwords right. It's probably best to start over when you're not hungover."
        exit 1
     fi
  else
      echo "Uh-oh, you didn't get the passwords right. It's probably best to start over."
      exit 1
  fi
  if [$debug]; then
      echo "root:${root_password}"
      echo "puryfier:${puryfier_password}"
  fi
#+end_src

* How to make pury.fi censorship permanent

There are three basic steps to lock down an Ubuntu machine and prevent the disabling of a firefox extension by hand:

1. Prevent the user from removing the pury.fi extension by establishing a ~policies.json~ file in the appropriate place: ~/etc/firefox/policies/policies.json~

2. Prevent the user from downloading images or videos and viewing them with another program.

3. Restrict the user's access by removing ~sudo~ rights and making it difficult for the user to re-obtain them.

** a note on bash code below

The script fragments below are meant to be run as root in the order that they are set out in this document. They are prefaced by ~$cmd~ and piped commands are prefaced by ~$cmd_pip~ to allow the use of a dry-run flag in the script. _These variables can be ignored if you are entering these commands by hand.)_ 

** lock down firefox and pury.fi

*** source of `policies.json'

We use the convention of prepending a ~_~ to a key-value pair in order to disable the setting. Here the installation of the extensions is made mandatory.

Feel free to remove adblock if it messes with your chill.

#+begin_src json :tangle policies.json
      {
          "policies": {
              "BlockAboutConfig": true,
              "BlockAboutProfiles": true,
              "BlockAboutSupport": true,
              "DisableDeveloperTools": true,
              "DisableSetDesktopBackground": true,
              "DisablePrivateBrowsing": true,
              "Extensions": {
                  "Locked": ["pury.fi@pury.fi",
                             "video.blocker@over.builder",
                             "safemode@over.builder" ]
              },
              "ExtensionSettings": {
                  "_comment": "This format allows the automatic installation of extensions.",
                  "pury.fi@pury.fi": {
                      "_installation_mode": "force_installed",
                      "_install_url": "need a location for this"
                  },
                  "video.blocker@over.builder": {
                      "_installation_mode" : "force_installed",
                      "_install_url": "i can upload this somewhere"
                  },
                  "safemode@over.builder": {
                      "_installation_mode" : "force_installed",
                      "_install_url": "i can upload this somewhere"
                      },
                  "uBlock0@raymondhill.net": {
                      "_comment": "I recommend having this automatically installed to prevent leaking nudity from crafty advertisements on porno sites.",
                      "installation_mode": "force_installed",
                      "install_url": "https://addons.mozilla.org/firefox/downloads/latest/ublock-origin/latest.xpi"
                  }
              }
          }
      }
#+end_src


*** install `policies.json' into the systemwide mozilla/profiles folder

This folder doesn't exist for the default install, so we have to create it.

(This installation should probably be done in the local user folder, but I don't think there is a place to put the code that isn't clobbered by updates.

#+begin_src shell
  $cmd mkdir /etc/firefox
  $cmd mkdir /etc/firefox/policies
  $cmd cp policies.json /etc/firefox/policies/policies.json
#+end_src

** prevent the downloading of image and video files

The basic idea here is that we force Firefox to download to a subdirectory of the user's folder (~/Downloads~ is a sensible default) and then run a script to watch for and delete image and video files downloaded to that folder. (Wouldn't it be nice to censor them instead?)

Firefox is now a snap, which has pros and cons. One con is that hacking snaps to do what you want isn't well documented on [[stackexchange.com][Google]]. But we can work around it by changing the permissions granted to the program in ~/var/lib/snapd/apparmor/policies/firefox.firefox.snap~

*** edit the apparmor settings of firefox to prevent downloading

Getting firefox to do what I wanted actualy turned out to be a lot more difficult than expected. AppArmor isn't easy to understand, and snap is basically inscrutible to mere mortals like me. This hack is brittle, as it is overwritten by the removal and reinstallation of firefox and might be overwritten by upgrades (not tested).

This can probably be done automagically using a proper diff, but I haven't got around to it yet. So do this part by hand and pretend it was scripted.

**** the "diff"

We're looking for this area:
#+begin_src text :tangle no
# Description: Can access non-hidden files in user's $HOME. This is restricted
# because it gives file access to all of the user's $HOME.
#+end_src


We want to comment out the following lines:
#+begin_src text :tangle no
# Allow read/write access to all files in @{HOME}, except snap application
# data in @{HOME}/snap and toplevel hidden directories in @{HOME}.
# owner @{HOME}/[^s.]**             rwklix,
# owner @{HOME}/s[^n]**             rwklix,
# owner @{HOME}/sn[^a]**            rwklix,
# owner @{HOME}/sna[^p]**           rwklix,
# owner @{HOME}/snap[^/]**          rwklix,
#+end_src

And a little bit lower, there's this bit to comment out:
#+begin_src text :tangle no
# Allow creating a few files not caught above
owner @{HOME}/{s,sn,sna}{,/} rwklix,
#+end_src


We want to add the following lines:
#+begin_src text :tangle no
  # Allow read-only access to all files in @{HOME}.
  owner @{HOME}/[^.]**    r,
  # Allow read-write access to all files in @{HOME}/Downloads
  owner @{HOME}/Downloads/**  rwixxx
#+end_src

**** apply the diff

You want to edit this file:

#+begin_src shell
# /var/lib/snapd/profiles/snap.firefox.firefox
#+end_src

This will be fixed in future versions to apply a diff, but I've mangled the original on my current system and don't know how to use ~diff~ and ~patch~ anyways.

*** use ~systemd~ to automatically delete image and video files within home/Downloads folder

**** the path

#+begin_src systemd :tangle censored-servant.path
  [Unit]
  Description="Monitor the $HOME/Downloads directory of a user for changes."

  [Path]
  PathModified=/home/pervert/Downloads
  Unit=censored-servant.service

  [Install]
  WantedBy=multi-user.target
#+end_src

**** the service

#+begin_src systemd :tangle censored-servant.service
  [Unit]
  Description="Run a script to delete image and video files from the user's folder."

  [Service]
  ExecStart=/usr/local/bin/delete-images-and-videos.sh 
#+end_src

**** the script

This could probably be improved by censoring these images automatically, but it's not clear how to make a local api. Something like AVFS might be usable to prevent hiding images in archive files.

#+begin_src shell :tangle delete-images-and-videos.sh
  #!/bin/bash
  for f in /home/$pervert/Downloads/* /home/$pervert/Downloads/**/* ; do
    f_mime=`file --mime-type "$f" | sed -n -e 's/^.*: //p'`
  
    case $f_mime in
        image* | bitmap* | video*)
            rm "$f"
            ;;
        *)
            ;;
    esac
  done
#+end_src

**** putting the script in place

#+begin_src shell
  $cmd chmod +x delete-images-and-videos.sh
  $cmd cp delete-images-and-videos.sh /usr/local/bin/delete-images-and-videos.sh

  $cmd cp censored-servant.path /etc/systemd/local/user/
#+end_src

*** disable downloading files with other software

**** disable curl and wget for unprivileged users

#+begin_src shell
chmod 750 /bin/curl
chmod 750 /bin/wget
#+end_src

**** torrents

**** other web software

Delete your other web browsers.

*** restrict ability to install software

**** nerf apt and snap by taking away sudo

This doesn't require any extra work.

**** further hardening

Obviously, you could download software and install it. We could delete files matching the ~application/*~ mime type being downloaded, but that wouldn't stop installing from source. If we did restrict access to e.g. ~make~ or ~python~ we're going to be making the computer pretty useless for programming and maybe computing in general. ~emacs~ even has a builtin browser.

Open to suggestions about how this can be hardened

** password protect grub

So grub is set up through some config files in the ~/etc/grub.d~ directory, which go together like magic through

This will put in a password so that the menuentries can't be modified without inputting a password. This effectively makes it more difficulat than pulling up a grub menu and adding ~rw~, ~init=/bin/bash~. A live usb will still get you booting as root.

This is the level of security through obscurity that I'm up for at this point. I have to download and then use a live usb to get single user access to my system once its in place. Obviously you could lock it down further by putting in place a bios password, or getting creative with EFI, but I'm not ready to commit that hard.

*** create 01_password file in etc/grub.d

#+begin_src :tangle 01_password
cat<<EOF
set superusers:"puryfier","root"
passwd puryfier $puryfier_passwd
passwd root     $root_passwd
EOF
#+end_src

Set the permissions to 770 so that you can't read the password from your normal account. That way we don't have to fiddle with encrypting the passwords. This is all about security through obfuscation, not real security.

*** Adjust menu-entry to add --unrestricted flag

This allows grub to boot the menuitems without requiring a password.

So this isn't something I'm comfortable scripting yet. Basically, you want to find the line that looks like:
#+begin_src shell :tangle no
echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" | sed "s/^/$submenu_indentation/"
#+end_src
Then add an unrestricted, like so:
#+begin_src shell :tangle no
echo "menuentry --unrestricted '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" | sed "s/^/$submenu_indentation/"
#+end_src
I have also changed:
#+begin_src shell :tangle no
  echo "menuentry '$(echo "$os" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-simple-$boot_device_id' {" | sed "s/^/$submenu_indentation/"
#+end_src
In the same way:
#+begin_src shell :tangle no
  echo "menuentry --unrestricted '$(echo "$os" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-simple-$boot_device_id' {" | sed "s/^/$submenu_indentation/"
#+end_src
** make user unprivileged

I think you can run this as yourself. I tested it at least once, maybe?

#+begin_src shell
$cmd deluser $pervert sudoers
#+end_src

** tell user to delete saved porn

I keep most of my +porn+ taxes on an external drive that fits in a locking case along with my keys, so that's what I do. You can find a way to make it inaccesible that works for you. I would be cautious about encrypting it with a password stored on ptimelock, but you could save the password in a plain text file in the puryfier acocunt, since you should be able to access that account using a liveusb.

#+begin_src shell
echo "You are now locked out. Check to make sure everything works. Once you've tried logging into root, puryfier, and checked to make sure the grub password works.
#+end_src

* Censored Servant Extension

This extension prevents videos from loading on sites that aren't whitelisted. Pury.fi needs to have youtube whitelisted. If you have a good computer, you can just install [[https://addons.mozilla.org/en-CA/firefox/addon/restricted-mode-on/][Restricted Mode: On]] and go with that and the video overlay instead.


** Video Block Extension

*** manifest.json

#+begin_src json :tangle video-block-extension/manifest.json
  {
      "manifest_version": 2,
      "name": "Video Block Extension",
      "description": "Automatically bans all videos except: youtube.com",
      "version": "0.0.2",
      "author": "Censored Servant",
      "browser_specific_settings": {
          "gecko": {
              "id": "video.block@over.builder"
          }
      },
      "permissions": [
          "notifications",
          "<all_urls>",
          "tabs",
          "storage",
          "webRequest",
          "webRequestBlocking"
      ],
      "background": {
          "persistent": true,
          "page": "block.html"
      }
  }
#+end_src

*** block.html
#+begin_src html :tangle video-block-extension/block.html
  <!DOCTYPE html>
  <html lang="en">

  <head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
  </head>

  <body>
    <script src="block.js"></script>
  </body>

  </html>
#+end_src

*** block.js
#+begin_src js :tangle video-block-extension/block.js
const MODES = {
  ALLOW_AUDIO_AND_VIDEO: 1,
  BLOCK_AUDIO_AND_VIDEO: 2,
  BLOCK_VIDEO_ONLY: 3
};

// hardcoded because I'm not a real programmer
let storage = {
    defaultMode: MODES.BLOCK_VIDEO_ONLY,
    ["www.youtube.com"]: MODES.ALLOW_AUDIO_AND_VIDEO
};


function getCurrentMode(hostname) {
    let hostnameMode = storage[hostname];
  if (hostnameMode !== undefined) {
    return hostnameMode;
  }
  let defaultMode = storage.defaultMode;
  return defaultMode;
}


browser.webRequest.onHeadersReceived.addListener(function (details) {
  for (const header of details.responseHeaders) {
    if (header.name.toLowerCase() === 'content-type') {
      let type = header.value;
      let videoMatch = type.search(/video/i) >= 0;
      let audioMatch = type.search(/audio/i) >= 0;
      if (!videoMatch && !audioMatch) {
        return;
      }
      //at this point, the request IS a target
      let url = details?.frameAncestors[0]?.url ?? details.originUrl ?? details.url;
      url = new URL(url);
      let currentMode = getCurrentMode(url.hostname);
      if (currentMode === MODES.ALLOW_AUDIO_AND_VIDEO) {
        return;
      }
      //mode: block...something!
      //so, video is blocked regardless
      if (videoMatch) {
        return {
          cancel: true
        };
      }
      //audio match
      if (currentMode === MODES.BLOCK_VIDEO_ONLY) {
        return;
      }
      //audio match & mode: block audio and video
      return {
        cancel: true
      };
    }
  }
},
  {
    urls: ["<all_urls>"]
  },
  ["blocking", "responseHeaders"]
);

#+end_src

** Safe Mode On

This is "forked" / stolen from [[https://addons.mozilla.org/en-US/firefox/user/10289989/][Kiko]]'s little extension. It's not necessary now, but I've pulled it out here in case anyone else can figure out how to safe mode another video site.

*** manifest.json

#+begin_src json :tangle safe-mode-extension/manifest.json
  {
      "manifest_version": 2,
      "name": "Safe Mode Extension",
      "description": "Enforces safe mode on: youtube.com",
      "version": "0.0.2",
      "author": "Censored Servant",
      "browser_specific_settings": {
          "gecko": {
              "id": "safemode@over.builder"
          }
      },
      "permissions": [
          "notifications"
      ],
      "content_scripts": [{
          "matches": ["*://*.youtube.com/*"],
          "run_at": "document_start",
          "css": ["sites/youtube.css"],
          "js": ["sites/youtube.js"]
      }]
  }
#+end_src

*** sites
The sites directory allows enabling restricted mode (youtube) or equivalent on selected tabs.

**** youtube.com

***** youtube.css

#+begin_src css :tangle safe-mode-extension/sites/youtube.css
  /* Menu switch */
#header + #container > #sections yt-multi-page-menu-section-renderer:last-child #items ytd-compact-link-renderer:last-child {display:none !important}
#+end_src


***** youtube.js

#+begin_src js :tangle safe-mode-extension/sites/youtube.js
  var d = document;

  if (/PREF=/.test(d.cookie)) {
          ('; ' + d.cookie).split('; ').forEach(function(cookie) {
                  if (/^PREF=/.test(cookie) && !/f2=8000000/.test(cookie)) {
                          cookie += '&f2=8000000; domain=.youtube.com;';
                          d.cookie = cookie;
                          d.location.reload();
                  }
          });
  }
#+end_src

